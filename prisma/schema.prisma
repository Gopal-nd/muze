datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  playlist    Playlist[]
  song          Song[]
   upvotes       Upvote[]

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Playlist {
  id String @id @default(uuid()) 
  name String 
  email String
  user User @relation(fields: [email],references: [email])
  song Song[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Song{
  id String @id @default(uuid())
  title String
  thumbnail String
  youtubeId String
  upvote Int @default(0)
  playListId String
  email String
  user User @relation(fields: [email],references: [email])
  playlist Playlist @relation(fields: [playListId],references: [id], onDelete: Cascade)
  upvotes   Upvote[]  

    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([youtubeId, playListId, email])
}

model Upvote {
  id        String   @id @default(uuid())
  email    String
  songId    String
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([email, songId]) // A user can upvote a song only once
}


